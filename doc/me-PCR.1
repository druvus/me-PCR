.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ME-PCR 1"
.TH ME-PCR 1 "me-PCR 1.0.6" "2008-02-18" "Multithreaded Electronic PCR"
.SH "NAME"
me\-PCR \- multithreaded electronic PCR: find STS's in FASTA sequence
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
me-PCR [options] sts_file fasta_file >output
.PP
.Vb 16
\&  OPTIONS:
\&  M=#      Margin (default 50)
\&  N=#      Number of mismatches allowed (default 0)
\&  W=#      Word size (default 11)
\&  T=#      Number of threads (default 1)
\&  X=#      Number of 3'-ward bases in which to disallow mismatches (default 0)
\&  O=file   Output file name (default stdout)
\&  Q=#      Quiet flag
\&             0 = verbose progress messages
\&             1 = no progress messages (default)
\&  S=#      Max. line length for the STS file (not counting line
\&             terminators) (default 1022)
\&  Z=#      Default PCR size (default 240)
\&  I=#      IUPAC flag
\&             0 = don't honor IUPAC ambiguity symbols in STS's (default)
\&             1 = honor IUPAC ambiguity symbols in STS's
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
me-PCR searches large sequences for Sequence-Tagged Site (\s-1STS\s0)
markers, or any sequence fragment that can be defined in terms of two
short subsequences separated by an approximate distance.  me-PCR was
originally an enhanced version of Dr. Gregory Schuler's e\-PCR program
(see the \*(L"\s-1HISTORY\s0\*(R" section at the bottom of this document).
However, me-PCR has not been maintained for several years.
.PP
In general, you should e\-PCR instead of me\-PCR!  e\-PCR has improved
greatly over the years.
.Sh "\s-1QUICK\s0 \s-1START\s0"
.IX Subsection "QUICK START"
me\-PCR's performance and results are greatly affected by the M
(margin), N (mismatches), and W (word size) parameters.  See the
following list for tips.  
.PP
me-PCR can do ultra-fast matches of W adjacent bases (called the
\&\*(L"hash word\*(R") in a primer.  The price of this speed is that mismatches,
if any are allowed by the N parameter, are \fInot\fR allowed to occur
inside a hash word.  If the left primer is found, a slower search
determines if the rest of the left primer is present in the right
spot.  If the entire left primer is found, a \fImuch\fR slower search
determines if the right primer is in the range of locations determined
by a) the stated \s-1PCR\s0 product length; b) the margin M; and c) for
\&\s-1STS\s0's with a size of 0, the default product length of 240.  (The Z
parameter can change this default). If the stated or default product
length is denoted \fIL\fR, then the right primer is searched for in those
positions such that the \s-1STS\s0 length would be greater than or equal to
\&\fIL\fR \- M and less than or equal to \fIL\fR + M.  \s-1STS\s0's are searched
for in both orientations.
.PP
\fITips:\fR
.IX Subsection "Tips:"
.IP "\(bu" 4
If you are allowing mismatches with a nonzero N value, you may want to
use the new X parameter to disallow mismatches on the 3' end of the
right primer (the left primer has 3'\-ward mismatches implicitly
disallowed by the has word).  The N parameter takes a numeric
argument, which is the number of bases, counting from the 3' end of
the right primer, which may not have mismatches, even if mismatches
are allowed elsewhere in the primer.
.IP "\(bu" 4
me-PCR uses a \fIlot\fR of memory; the entire \s-1FASTA\s0 file, \s-1STS\s0 file, and
hash table are stored in memory.  See the hash table memory usage
table under the \*(L"W=n \- Word size\*(R" section.  Try not
to exceed your computer's physical memory; otherwise, performance may
be unacceptable, even to the point of inoperability, depending on your
operating system!  If you are memory\-constrained, you may need to use
a smaller W value and/or split \s-1FASTA\s0 files.
.IP "\(bu" 4
The \s-1STS\s0 file should be a tab-delimited UNIX-format file in the format
used by the UniSTS data files, except that all fields after the \s-1PCR\s0 product
length are optional.  See also the \*(L"\s-1FILES\s0\*(R" section near the bottom of
this document.
.IP "\(bu" 4
As of version 1.0.5c, me-PCR can now process multiple sequences in a
single \s-1FASTA\s0 file, which restores behavior from the original e\-PCR
program.  Note, however, that this new support is not yet integrated with
the multi-threading feature of me\-PCR.
.IP "\(bu" 4
me-PCR is faster than e\-PCR only for sequences greater than 3 \s-1MB\s0 in size.
.IP "\(bu" 4
Don't forget to redirect your output to a file 
(or use O=filename).
.IP "\(bu" 4
The default wordsize (W) of 11 uses an extra 16 \s-1MB\s0 of memory.  10 uses
4 \s-1MB\s0, 9 uses 1, and so forth.  W=11 is many times faster than W=8.  On
machines we've tested, W=11 is optimal \*(-- if you have the memory to
spare. Higher values of W will not improve performance significantly
and may in fact bring your machine to a \fIgrinding halt\fR if you greatly
exceed your computer's physical memory.  Also, higher values of W will
make more markers unsearchable, since each primer needs to have at
least W adjacent A/C/G/T symbols in order to be searchable.  The other
disadvantage of high W values is that, because no ambiguity is
permitted in the hash word, setting the allowable mismatches (N)
parameter greater than the default of 0 will \fInot\fR have any effect on
the bases in the hash word.  E.g., if W=11 and the primer is 11 bases
long, even if N allows mismatches, no mismatches will be allowed in
the first primer!  If you have \s-1CPU\s0 to burn, smaller W values are
better.
.IP "\(bu" 4
If you want \s-1IUPAC\s0 ambiguity symbol such as 'N', 'W', etc, to be
interpreted properly \fIin the primers\fR, make sure to use the I=1
option.  Otherwise, an \s-1STS\s0 containing ambiguities will never match
unless the N option is set to a positive value.  'N' symbols in the
\&\s-1FASTA\s0 file will never match anything unless the N option is positive.
.IP "\(bu" 4
If you are really serious about milking everything out of your \s-1STS\s0's,
the do successive runs of me\-PCR, the first with N=0.  Take only those
markers for which there were no hits, and run me-PCR again, this time
with N=1.  This can be easily automated with a Perl script front\-end;
this will be added to the me-PCR package soon.  You will probably want
to clean up with \s-1BLAST\s0.
.IP "\(bu" 4
If you have multiple \s-1CPU\s0's, set T=n, where \fIn\fR is the number of
\&\s-1CPU\s0's at your disposal (be polite, though).  Actually, you often get a
small performance boost by setting n to be 1 or 2 threads \fImore\fR than
the number of \s-1CPU\s0's, even for a single processor.
.IP "\(bu" 4
The default \s-1PCR\s0 size of 240 (used when an \s-1STS\s0 has a stated size of 0)
may be too large.  Typical average \s-1STS\s0 product length is around 165,
and the default margin (M) of 50 will miss many.  Therefore, either
use a larger margin, or else separate your 0\-length \s-1STS\s0's from the
rest and run them with a larger margin (M) value.
.Sh "\s-1DETAILS\s0"
.IX Subsection "DETAILS"
.Vb 2
\&            Figure 1. How me-PCR views a search
\&              once the left primer is found.
.Ve
.PP
.Vb 5
\&                PCR product size
\&                       |                  M (margin)
\&       |---------------+---------------|       |
\&       |                               |-------+-----|
\&       A                 B             C             D
.Ve
.PP
.Vb 1
\&  -//--[nnnn#####n]-----(<-------------+--[nnnnn]---]>)----//--
.Ve
.PP
.Vb 8
\&       |--+-------|                       |-----|
\&          |                                  |
\&         /  |-+-|                      "Right" primer
\&         |     \e         |                           |
\&      "Left"  Hash       |-------------+-------------|
\&      primer  word                     |
\&              (W)             Possible location of
\&                                 right primer
.Ve
.PP
.Vb 4
\&          A = sequence position of left primer
\&          B = leftmost possible position of left side of right primer
\&          C = expected position of right side of right primer
\&          D = rightmost possible position of right side of right primer
.Ve
.PP
For each primer of an \s-1STS\s0, a \*(L"hash word\*(R" is computed, which is
essentially W adjacent bases somewhere inside the primer compressed
into a 32\-bit integer, where each of the four bases occupies two binary
bits.  Unlike original e\-PCR, the hash word can occur anywhere, not
just at the end.  Both primers are used because me-PCR searches for
the \s-1STS\s0 in both forward and reverse orientations.  In Figure 1, the
bases contributing to the hash word are denoted by pound signs.  A
primer can not be hashed if the W value is larger than the primer
is long or if ambiguity symbols in the primer prevent the occurrence
of W adjacent bases.  If a primer can't be hashed, a warning is
displayed, and the \s-1STS\s0 will not be searched for in the corresponding
orientation.  
.PP
Pointers to the \s-1STS\s0's are placed in a hash table, which is simply an
array of \fIX\fR pointers, where \fIX\fR is the number of possible hash
words (2 raised to the 2*W power)  (For large values of W,
this table becomes very large; at W=11, the usage is 16 \s-1MB\s0.) Note
that it is perfectly possible for primers to share the same hash value
(and hence hash table entry), in which case they are said to collide.
Such colliding primers are dealt with by a linked list extending from
the hash table entry.
.PP
When searching, me-PCR slides a W\-sized window across the
underlying sequence.  For each W\-sized window, me-PCR computes
the corresponding hash value and determines which primers have a
matching hash word.  This determination is instantaneously provided by
a simple array index operation.  In the case that multiple primers
match because they share the same hash word, me-PCR looks at each
in turn by following a linked list from the main hash table entry.  If
the hash value of a primer matches, a direct string comparison is made
against the entire primer.  If this comparison succeeds, then direct
string comparisons of the second primer against the underlying sequence
are made.  The second primer has an expected offset relative to the
first primer (implied by a known \s-1PCR\s0 amplicon size), but the margin
parameter M allows the position of the second primer to vary relative
to the first, at the computational cost of 2*M additional string
comparisons.
.PP
The sensitivity of a search is primarily dictated by two parameters:
the number of potential mismatches \fIN\fR in the \s-1STS\s0 other than the hash
word, and the margin \fIM\fR.  As stringency is decreased (i.e.
N or M is increased), the likelihood of a match increases.
However, a trade-off exists between stringency and the probability of
a false hit.
.Sh "\s-1DIFFERENCES\s0 \s-1FROM\s0 \s-1ORIGINAL\s0 e\-PCR \s-1AS\s0 \s-1OF\s0 2002 (*** \s-1NO\s0 \s-1LONGER\s0 \s-1APPLICABLE\s0 ***)"
.IX Subsection "DIFFERENCES FROM ORIGINAL e-PCR AS OF 2002 (*** NO LONGER APPLICABLE ***)"
e\-PCR is much improved and in general should be used instead of me\-PCR.
.IP "\(bu" 4
Feature: me-PCR is multithreaded, allowing convenient and efficient use of
multiprocessor systems.
.IP "\(bu" 4
Feature: ranges in the \s-1PCR\s0 size input field are now accepted (e\-PCR v.2 does
this also).
.IP "\(bu" 4
Feature: optional interpretation of \s-1IUPAC\s0 symbols in \s-1STS\s0's.
.IP "\(bu" 4
Feature: the default \s-1STS\s0 size is now user-selectable (it was formerly
fixed at 240 for \s-1STS\s0's).
.IP "\(bu" 4
Bugfix: a bug is fixed in which some hits would be misreported.
.IP "\(bu" 4
Bugfix: a bug is fixed in which some potential matches would be missed near
the edge of the sequence.
.IP "\(bu" 4
Enhancement: up to 60% faster than e\-PCR v.2 using the same parameters.
.IP "\(bu" 4
Enhancement: word size W now has a maximum value of 16 instead of 8.  Increasing
the word size to 11 can make me-PCR more than \fB4 times faster\fR than with
a word size of 8.
.IP "\(bu" 4
Enhancement: the new X parameter to disallow 3' mismatches in both primers.
.IP "\(bu" 4
Bugfix/enhancement: Primers can now be very large, allowing the use of \s-1SNP\s0 flanking
sequences as virtual primers.
.IP "\(bu" 4
Bugfix: if an \s-1STS\s0 can't be searched for in one orientation (because of an
ambiguous or short primer, for instance), it is still
searched for in the other orientation.
.IP "\(bu" 4
Bugfix: \fIall\fR hits for an \s-1STS\s0 anchored at the same left sequence
position are reported (e\-PCR would only report the first one).
This happens sometimes in repetitive regions.
.IP "\(bu" 4
Enhancement, sort of: the margin (M) parameter can now be 0.
.IP "\(bu" 4
Bugfix: invalid command-line parameters are now reported as errors
instead of being silently coerced to default values.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "I=\fIn\fR \- \s-1IUPAC\s0 flag" 4
.IX Item "I=n - IUPAC flag"
.Vb 2
\&  0 = don't honor IUPAC ambiguity symbols in STS's (default)
\&  1 = honor IUPAC ambiguity symbols in STS's
.Ve
.Sp
The new optional I (\s-1IUPAC\s0) parameter allows me-PCR to correctly
interpret ambiguity symbols in \s-1STS\s0's.  The IUPAC-based comparison is
performed only for primers containing ambiguity symbols; a faster
comparison is always performed for unambiguous primers.
.Sp
The original me-PCR program does not honor ambiguous base symbols such
as 'N','W', etc, during direct string comparisons.  If the N parameter
is 0 in original me\-PCR, the effective result is that no \s-1STS\s0 containing
an ambiguous base symbol will ever be localized.  Likewise, if the N
parameter is 0, no \s-1STS\s0 will ever be localized in a region of the
underlying sequence which itself contains ambiguous base characters.
.Sp
me-PCR does \fInot\fR honor \s-1IUPAC\s0 symbols in the underlying sequence,
e.g.  an 'A' in an \s-1STS\s0 will never match an 'N' in the underlying
sequence.  This is not an unreasonable limitation, because the vast
majority of ambiguity symbols in chromosome assemblies are merely
placeholders for gaps, taking the form of large blocks of 'N' symbols.
.IP "M=\fIn\fR \- Search margin (default 50)" 4
.IX Item "M=n - Search margin (default 50)"
The M (margin) parameter controls the allowed distance between the
primers of an \s-1STS\s0; it allows some flex in the stated \s-1STS\s0 size of \s-1STS\s0's
and permits the localization of \s-1STS\s0's without a known \s-1STS\s0 size.  In
the latter case, the Z value is important.  Increasing the M
value increases the likelihood of finding \s-1STS\s0's at the cost of
performance.  Also, as M increases, the likelihood of finding
multiple matches increases.
.Sp
me-PCR allows an M value as low as 0, which, while not generally
useful, is the most stringent search condition possible.
.Sp
For ranged \s-1PCR\s0 sizes (product lengths), the margin value is applied to
range, so that, if the range is 100\-150 and M is 50, the effective
range is 50\-200.
.IP "N=\fIn\fR" 4
.IX Item "N=n"
Setting N greater than 0 relaxes stringency and increases the chance
of false hits.  Setting N greater than 0 allows \fIn\fR mismatches
anywhere in the primers except in the hash word (the 3' side of the
left primer) and, optionally, the 3' side of the right primer, when
the \fIX\fR parameter is nonzero.
.IP "X=\fIn\fR" 4
.IX Item "X=n"
If you are allowing mismatches with a nonzero N value, you may want to
use the new X parameter to disallow mismatches on the 3' end of the
right primer (the left primer has 3'\-ward mismatches implicitly
disallowed by the has word).  The N parameter takes a numeric
argument, which is the number of bases, counting from the 3' end of
the right primer, which may not have mismatches, even if mismatches
are allowed elsewhere in the primer.
.IP "O=\fIfile\fR \- Output file name (default stdout)" 4
.IX Item "O=file - Output file name (default stdout)"
Self\-explanatory.
.IP "Q=\fIn\fR \- Quiet flag" 4
.IX Item "Q=n - Quiet flag"
.Vb 2
\&  0 = verbose progress messages
\&  1 = no progress messages (default)
.Ve
.IP "S=\fIn\fR \- Max. line length for the \s-1STS\s0 file (default 1022)" 4
.IX Item "S=n - Max. line length for the STS file (default 1022)"
You are unlikely to need to change this!
.IP "T=\fIn\fR \- Number of threads (default 1)" 4
.IX Item "T=n - Number of threads (default 1)"
The new T parameter controls the number of threads used during the
search.  Computers with multiple \s-1CPU\s0's typically assign each new
thread to a different processor.  me-PCR automatically breaks down the
search task into one chunk per thread, so the entire search job takes
considerably less time than with one processor.  
.Sp
Note that the performance increase is far from linear; the rate of 
increase diminishes with each added thread.  This effect is typical of
\&\s-1SMP\s0 computers but varies somewhat depending on operating system and
hardware configuration.  Also note that performance increases slightly
as the number of threads is increased above the number of \s-1CPU\s0's.  This
effect can be used as a \*(L"poor man's priority booster\*(R", but it might be
a better idea to adjust process priorities using the official
mechanisms appropriate for the operating system.
.Sp
If you are searching for \s-1STS\s0's across multiple sequences,
multithreading is not strictly necessary in order to take full
advantage of multi-processor computers.  As an example, one can simply
start 8 simultaneous instances of a single-threaded program on an
8\-processor computer, and the operating system will distribute
the program processes across all processors.  The obvious way to do this is to
use a shell script to start 8 instances of a program in the
background.  If the number of jobs is larger than the number of
processors, it is hard to control them properly with a simple shell
script.  The danger is that too many processes will run at the same
time, causing \s-1CPU\s0 contention and quite likely disk thrashing, if each
program uses a lot of memory (e.g. me-PCR operating on
chromosome-length sequence).  This problem can be solved in several
ways: patiently running programs sequentially on one \s-1CPU\s0 (;\-); writing a
custom launcher script in Perl to run the jobs; or use \s-1GNU\s0 make.
With a parallel make utility (such as \s-1GNU\s0 make with its 'j' option),
many separate runs can be performed, all driven by a
single makefile, and the make utility will ensure that exactly 8
processes are running at any given time.  However, the 
multithreading feature of me-PCR is much easier to use, and just as
fast!
.Sp
me-PCR automatically uses just a single thread when processing
sequences less than a certain amount, currently 100KB.
.Sp
me-PCR is tuned for processing very large sequences; in fact, me-PCR
is \fIslower\fR than the latest version of e\-PCR (using W = 8) when
operating on sequences less than ca. 3 \s-1MB\s0, because of the overhead of
creating an extra thread.  This flaw will be fixed in the future.
.IP "W=\fIn\fR \- Word size (default 11)" 4
.IX Item "W=n - Word size (default 11)"
The W (word size) parameter controls the size of the hash word that is
central to the algorithm's speed.  The original version of me-PCR has
an artificial upper bound on W of 8, possibly because it was
originally a 16\-bit application.  me-PCR accepts W values up to
16.  A larger word size is usually better.  me-PCR with a word
size of 11 runs 4.8 times faster than with a word size of 8 (the
maximum for original e\-PCR), at a cost of just 15.8 \s-1MB\s0 \s-1RAM\s0 and 71
\&\s-1STS\s0's not searchable out of a set of 130,650 \s-1STS\s0's from UniSTS (.05%).
me-PCR with a word size of 11 runs over 15 times faster than with
a word size of 7, the default word size used by original e\-PCR.
.Sp
The only disadvantages of a larger word size are 1) a larger memory
requirement; 2) a possible, small increase in the number of \s-1STS\s0's that
won't be searched for; and 3) a possible, small increase in the number
of \s-1STS\s0's that can't be found when using N > 0 if one of the
bases in the hash word is 'N' or wrong. 
.Sp
The second disadvantage affects a tiny percentage of \s-1STS\s0's and applies
in only two cases: 1) when the number of mismatches allowed (N) is
nonzero; or 2) in the case of me-PCR with the \s-1IUPAC\s0 option enabled,
even when N is 0.  The issue is that me-PCR cannot build a
W\-length hash word for a primer unless there are W consecutive
unambiguous bases in the primer.  In the case of original me\-PCR,
the limitation is more severe in that the hash word can only occur at
the end of the primer.  For instance, at a word size of 7, original
me-PCR is unable to search for 128 \s-1STS\s0's out of the test UniSTS
set, but me-PCR is unable to search for only 1, thanks to its
variable offset hash feature.  There is some biological justification
for the limitation in \s-1NCBI\s0 e\-PCR, but the justification becomes
rapidly less relevant as the word size is increased.
.Sp
If you want to use me-PCR to search for \s-1STS\s0's containing ambiguous
bases, there are two options.  First, you can run me-PCR with the
mismatch parameter N greater than 0.  Doing so will reduce the
stringency unnecessarily to treat a very special case.  The preferable
alternative is to run me-PCR with the mismatch parameter N set to
0 and the \s-1IUPAC\s0 parameter set to 1.  This will retain stringency for
all \s-1STS\s0's except those with ambiguous bases, and will only allow
IUPAC-determined mismatches in the latter.  
.Sp
A word size of around 11 seemed to produce optimal results.  The
optimal word size depends on platform and available memory, but word
sizes of 10\-12 are generally best. However, if too large a word size
is specified, such that the memory demands of the hash table exceed
physical memory, performance plummets due to page swapping.  
.Sp
The following table shows the relationship of word size W to hash
table memory usage:
.Sp
.Vb 18
\&   W     Memory  Time
\&  --   --------  ----
\&   1       0 MB    NA
\&   2       0 MB    NA
\&   3       0 MB    NA
\&   4       0 MB    NA
\&   5       0 MB  4238
\&   6       0 MB  1143
\&   7      .1 MB   315
\&   8      .2 MB    96
\&   9       1 MB    37
\&  10       4 MB    23
\&  11      16 MB    20
\&  12      64 MB    21
\&  13     256 MB    25
\&  14   1,024 MB  2232
\&  15   4,096 MB    NA
\&  16  16,384 MB    NA
.Ve
.Sp
The time column shows the time to run ca. 80,000 \s-1STS\s0's against
chromosome 19 on an 867 MHz G4 \s-1OS\s0 X computer with 1.1 \s-1GB\s0 \s-1RAM\s0.
Cells marker '\s-1NA\s0' were not tested.
.IP "Z=\fIn\fR \- Default \s-1PCR\s0 size (default 240)" 4
.IX Item "Z=n - Default PCR size (default 240)"
The Z option determines the default \s-1STS\s0 size if the latter field has
been assigned 0 in the \s-1STS\s0 input file.  In the absence of the Z
option, me-PCR follows the behavior of original me\-PCR, which is to
assign a default \s-1STS\s0 size of 240.
.Sp
In one database of 70,498 human \s-1STS\s0's, the average \s-1STS\s0 length is
165, the median is 155, and the percent of lengths between 190 and 290
(the range implied by the default margin (M) value of 50) is 24%.
8.1% of our test \s-1STS\s0 set has zero length.  Given a similar dataset,
researchers may wish to tune the default \s-1STS\s0 length using the Z option
on the me-PCR command line.  Use of a generous margin value M is also
recommended.  A Perl script for evaluating an \s-1STS\s0 set is provided in
the me-PCR distribution.  Alternatively, and possibly as a matter
of course, users may wish to separate \s-1STS\s0's with 0 length and run them
with a large M parameter value.
.SH "RETURN VALUE"
.IX Header "RETURN VALUE"
0 if a search can be made; nonzero otherwise.
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
Use the V=1 switch to turn on verbose messages.  These are written
to \s-1STDERR\s0; you may want to redirect to a file.
.SH "FILES"
.IX Header "FILES"
.Sh "\s-1STS\s0 \s-1INPUT\s0 \s-1FILE\s0"
.IX Subsection "STS INPUT FILE"
The \s-1STS\s0 input file should have the following format:
.PP
.Vb 5
\&    Field 1: Unique Id
\&    Field 2: Primer1
\&    Field 3: Primer2
\&    Field 4: PCR product size in bp
\&    Fields 5+: optional
.Ve
.PP
This format is compatible with the UniSTS data file format (e.g.
UniSTS_human.sts).
.PP
Lines are terminated by linefeeds (\s-1ASCII\s0 10), the convention for \s-1UNIX\s0
text files.
.PP
The product size may be a range of numbers separated by a dash.
.PP
The unique \s-1ID\s0 is important for identifying output lines but is
otherwise ignored.
.PP
Primers should not use notation such as '[A/T]'.
.Sh "\s-1FASTA\s0 \s-1INPUT\s0 \s-1FILE\s0"
.IX Subsection "FASTA INPUT FILE"
The \s-1FASTA\s0 input file should be a UNIX-style text file with the
following format:
.PP
.Vb 3
\&  >label
\&  nnnnnnnnnn...
\&  ...
.Ve
.PP
There can now be multiple sequences in this file.  However, me-PCR
does not yet assign individual sequences to separate threads.
Therefore, for high-thoughput processing of many small sequences, it
would currently be better to process them with separate invocations of
me\-PCR, controlled by a shell script or makefile.
.SH "CAVEATS"
.IX Header "CAVEATS"
.IP "\(bu" 4
Not much error-checking is done on the input \s-1STS\s0 file.  The file must
be tab-delimited and not have extra spaces.  Outrageous values may not
be detected for some fields.
.IP "\(bu" 4
Only one sequence is allowed in the input \s-1FASTA\s0 file.
.SH "NOTES"
.IX Header "NOTES"
.IP "\(bu" 4
\&\s-1STS\s0 memory usage and frequency of allocation is excessive.
.IP "\(bu" 4
Memory usage of the \s-1FASTA\s0 sequence could be greatly reduced.
.IP "\(bu" 4
There is no \s-1GUI\s0 frontend.
.IP "\(bu" 4
There should be an automatic \*(L"iterative\*(R" front-end that automatically
relaxes stringency in stages, setting aside the matching \s-1STS\s0's at each
stage.
.IP "\(bu" 4
The \*(C+ code is very rough; the C\-style multithreading code has been
crudely strapped on.  There are archaic sections of the code (such as
the support for Mac \s-1OS\s0 9) that need cleaning up.
.IP "\(bu" 4
me-PCR is slower than e\-PCR for small sequences because of thread
overhead.  For small sequences, me-PCR should never create additional
threads.
.Sh "\s-1TESTING\s0 \s-1METHODOLOGY\s0"
.IX Subsection "TESTING METHODOLOGY"
me\-PCR's output is tested against \s-1NCBI\s0's e\-PCR versions and
double-checked with custom Perl scripts, such as the provided
find_sts.pl program, to ensure no false positives.  False negatives
are eliminated using a custom test case generator that methodically
generates thousands of combinations of \s-1STS\s0 and \s-1FASTA\s0 files.  These
test cases were designed to exercise boundary conditions within
me-PCR and reduce the chance of bugs. Memory handling is checked
using dmalloc.  Multithreaded operation is tested and verified on Sun
Solaris, \s-1IBM\s0 \s-1AIX\s0, Apple \s-1OS\s0 X, SuSE Linux, and Microsoft \s-1XP\s0 platforms.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
http://genome.chop.edu/mePCR
.PP
e\-PCR (ftp://ftp.ncbi.nih.gov/pub/schuler/e\-PCR/)
.SH "AUTHORS"
.IX Header "AUTHORS"
Original author: G. D. Schuler, \s-1NCBI\s0
.PP
Current tweaker: Kevin Murphy, Children's Hospital of Philadelphia
<murphy@genome.chop.edu>
.SH "CHANGES"
.IX Header "CHANGES"
.Vb 3
\&  2008-02-18 1.0.6: Small sequences no longer cause aborts for T>1.
\&  2004-04-13 1.0.5c: Multiple sequences in FASTA files accepted.
\&  2004-04-05 1.0.5b: X parameter added.  Tested on AIX.
.Ve
.SH "HISTORY"
.IX Header "HISTORY"
me-PCR was developed by Kevin Murphy in Dr. Peter White's lab at
Children's Hospital of Philadelphia to be an enhanced version of G. D.
Schuler's e\-PCR program, used and distributed by \s-1NCBI\s0.  Dr. Schuler
published a paper about e\-PCR: \*(L"Sequence mapping by Electronic \s-1PCR\s0\*(R",
Genome Research 7: 541\-550, 1997. Thanks to Dr. Schuler for making his
source code available.
